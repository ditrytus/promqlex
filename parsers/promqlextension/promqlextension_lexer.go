// Code generated from PromQLExtensionLexer.g4 by ANTLR 4.13.2. DO NOT EDIT.

package promqlextension

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type PromQLExtensionLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var PromQLExtensionLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func promqlextensionlexerLexerInit() {
	staticData := &PromQLExtensionLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "WHITESPACE", "COMMENTS",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "", "", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'and'", "'or'",
		"'unless'", "'='", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'=~'",
		"'!~'", "'by'", "'without'", "'on'", "'ignoring'", "'group_left'", "'group_right'",
		"'offset'", "'bool'", "", "", "'{'", "'}'", "'('", "')'", "'['", "']'",
		"','", "'@'", "", "", "", "", "", "", "'if'", "'true'", "'false'", "'T'",
		"':'", "'.'", "", "", "", "'metric'", "'label'", "'def'", "'$'",
	}
	staticData.SymbolicNames = []string{
		"", "NUMBER", "STRING", "ADD", "SUB", "MULT", "DIV", "MOD", "POW", "AND",
		"OR", "UNLESS", "EQ", "DEQ", "NE", "GT", "LT", "GE", "LE", "RE", "NRE",
		"BY", "WITHOUT", "ON", "IGNORING", "GROUP_LEFT", "GROUP_RIGHT", "OFFSET",
		"BOOL", "AGGREGATION_OPERATOR", "FUNCTION", "LEFT_BRACE", "RIGHT_BRACE",
		"LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA",
		"AT", "DURATION", "METRIC_NAME", "LABEL_NAME", "WS", "SL_COMMENT", "EX_ID",
		"EX_IF", "EX_TRUE", "EX_FALSE", "EX_T", "EX_COLON", "EX_DOT", "EX_POSITIVE_INTEGER",
		"EX_TWO_DIGITS", "EX_DIGITS", "EX_METRIC_KEYWORD", "EX_LABEL_KEYWORD",
		"EX_DEF", "EX_CALL_SIGN", "EX_NL",
	}
	staticData.RuleNames = []string{
		"NUMERAL", "SCIENTIFIC_NUMBER", "NUMBER", "STRING", "ADD", "SUB", "MULT",
		"DIV", "MOD", "POW", "AND", "OR", "UNLESS", "EQ", "DEQ", "NE", "GT",
		"LT", "GE", "LE", "RE", "NRE", "BY", "WITHOUT", "ON", "IGNORING", "GROUP_LEFT",
		"GROUP_RIGHT", "OFFSET", "BOOL", "AGGREGATION_OPERATOR", "FUNCTION",
		"LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET",
		"RIGHT_BRACKET", "COMMA", "AT", "DURATION", "METRIC_NAME", "LABEL_NAME",
		"WS", "SL_COMMENT", "EX_ID", "EX_IF", "EX_TRUE", "EX_FALSE", "EX_T",
		"EX_COLON", "EX_DOT", "EX_POSITIVE_INTEGER", "EX_TWO_DIGITS", "EX_DIGITS",
		"EX_METRIC_KEYWORD", "EX_LABEL_KEYWORD", "EX_DEF", "EX_CALL_SIGN", "EX_NL",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 58, 479, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57,
		7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 1, 0, 4, 0, 123, 8, 0, 11, 0, 12, 0,
		124, 1, 0, 1, 0, 4, 0, 129, 8, 0, 11, 0, 12, 0, 130, 3, 0, 133, 8, 0, 1,
		1, 1, 1, 1, 1, 3, 1, 138, 8, 1, 1, 1, 3, 1, 141, 8, 1, 1, 2, 1, 2, 3, 2,
		145, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 151, 8, 3, 10, 3, 12, 3, 154,
		9, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 161, 8, 3, 10, 3, 12, 3, 164,
		9, 3, 1, 3, 3, 3, 167, 8, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7,
		1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11,
		1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1,
		14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18,
		1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1,
		21, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23,
		1, 23, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1,
		25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26,
		1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1,
		27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28,
		1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30,
		1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30,
		1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30,
		1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 342, 8,
		30, 1, 31, 1, 31, 1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35,
		1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1, 40, 4, 40, 363,
		8, 40, 11, 40, 12, 40, 364, 1, 40, 1, 40, 1, 40, 3, 40, 370, 8, 40, 4,
		40, 372, 8, 40, 11, 40, 12, 40, 373, 1, 41, 1, 41, 5, 41, 378, 8, 41, 10,
		41, 12, 41, 381, 9, 41, 1, 42, 1, 42, 5, 42, 385, 8, 42, 10, 42, 12, 42,
		388, 9, 42, 1, 43, 4, 43, 391, 8, 43, 11, 43, 12, 43, 392, 1, 43, 1, 43,
		1, 44, 1, 44, 5, 44, 399, 8, 44, 10, 44, 12, 44, 402, 9, 44, 1, 44, 1,
		44, 1, 44, 1, 44, 1, 45, 1, 45, 4, 45, 410, 8, 45, 11, 45, 12, 45, 411,
		1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1,
		48, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 52,
		1, 52, 4, 52, 436, 8, 52, 11, 52, 12, 52, 437, 1, 52, 5, 52, 441, 8, 52,
		10, 52, 12, 52, 444, 9, 52, 3, 52, 446, 8, 52, 1, 53, 1, 53, 1, 53, 1,
		54, 4, 54, 452, 8, 54, 11, 54, 12, 54, 453, 1, 55, 1, 55, 1, 55, 1, 55,
		1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 57, 1,
		57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 3, 59, 478, 8, 59,
		1, 400, 0, 60, 1, 0, 3, 0, 5, 1, 7, 2, 9, 3, 11, 4, 13, 5, 15, 6, 17, 7,
		19, 8, 21, 9, 23, 10, 25, 11, 27, 12, 29, 13, 31, 14, 33, 15, 35, 16, 37,
		17, 39, 18, 41, 19, 43, 20, 45, 21, 47, 22, 49, 23, 51, 24, 53, 25, 55,
		26, 57, 27, 59, 28, 61, 29, 63, 30, 65, 31, 67, 32, 69, 33, 71, 34, 73,
		35, 75, 36, 77, 37, 79, 38, 81, 39, 83, 40, 85, 41, 87, 42, 89, 43, 91,
		44, 93, 45, 95, 46, 97, 47, 99, 48, 101, 49, 103, 50, 105, 51, 107, 52,
		109, 53, 111, 54, 113, 55, 115, 56, 117, 57, 119, 58, 1, 0, 36, 1, 0, 48,
		57, 2, 0, 69, 69, 101, 101, 2, 0, 43, 43, 45, 45, 2, 0, 39, 39, 92, 92,
		2, 0, 34, 34, 92, 92, 2, 0, 65, 65, 97, 97, 2, 0, 78, 78, 110, 110, 2,
		0, 68, 68, 100, 100, 2, 0, 79, 79, 111, 111, 2, 0, 82, 82, 114, 114, 2,
		0, 85, 85, 117, 117, 2, 0, 76, 76, 108, 108, 2, 0, 83, 83, 115, 115, 2,
		0, 66, 66, 98, 98, 2, 0, 89, 89, 121, 121, 2, 0, 87, 87, 119, 119, 2, 0,
		73, 73, 105, 105, 2, 0, 84, 84, 116, 116, 2, 0, 72, 72, 104, 104, 2, 0,
		71, 71, 103, 103, 2, 0, 80, 80, 112, 112, 2, 0, 70, 70, 102, 102, 2, 0,
		77, 77, 109, 109, 2, 0, 88, 88, 120, 120, 2, 0, 86, 86, 118, 118, 2, 0,
		67, 67, 99, 99, 2, 0, 75, 75, 107, 107, 2, 0, 81, 81, 113, 113, 12, 0,
		68, 68, 72, 72, 77, 77, 83, 83, 87, 87, 89, 89, 100, 100, 104, 104, 109,
		109, 115, 115, 119, 119, 121, 121, 4, 0, 58, 58, 65, 90, 95, 95, 97, 122,
		4, 0, 48, 58, 65, 90, 95, 95, 97, 122, 3, 0, 65, 90, 95, 95, 97, 122, 4,
		0, 48, 57, 65, 90, 95, 95, 97, 122, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0,
		65, 90, 97, 122, 1, 0, 49, 57, 511, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0,
		0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0,
		0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0,
		0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1,
		0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39,
		1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0,
		47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0,
		0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0,
		0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0,
		0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1,
		0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85,
		1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0,
		93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0,
		0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1,
		0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0,
		115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0, 119, 1, 0, 0, 0, 1, 122, 1, 0,
		0, 0, 3, 134, 1, 0, 0, 0, 5, 144, 1, 0, 0, 0, 7, 166, 1, 0, 0, 0, 9, 168,
		1, 0, 0, 0, 11, 170, 1, 0, 0, 0, 13, 172, 1, 0, 0, 0, 15, 174, 1, 0, 0,
		0, 17, 176, 1, 0, 0, 0, 19, 178, 1, 0, 0, 0, 21, 180, 1, 0, 0, 0, 23, 184,
		1, 0, 0, 0, 25, 187, 1, 0, 0, 0, 27, 194, 1, 0, 0, 0, 29, 196, 1, 0, 0,
		0, 31, 199, 1, 0, 0, 0, 33, 202, 1, 0, 0, 0, 35, 204, 1, 0, 0, 0, 37, 206,
		1, 0, 0, 0, 39, 209, 1, 0, 0, 0, 41, 212, 1, 0, 0, 0, 43, 215, 1, 0, 0,
		0, 45, 218, 1, 0, 0, 0, 47, 221, 1, 0, 0, 0, 49, 229, 1, 0, 0, 0, 51, 232,
		1, 0, 0, 0, 53, 241, 1, 0, 0, 0, 55, 252, 1, 0, 0, 0, 57, 264, 1, 0, 0,
		0, 59, 271, 1, 0, 0, 0, 61, 341, 1, 0, 0, 0, 63, 343, 1, 0, 0, 0, 65, 345,
		1, 0, 0, 0, 67, 347, 1, 0, 0, 0, 69, 349, 1, 0, 0, 0, 71, 351, 1, 0, 0,
		0, 73, 353, 1, 0, 0, 0, 75, 355, 1, 0, 0, 0, 77, 357, 1, 0, 0, 0, 79, 359,
		1, 0, 0, 0, 81, 371, 1, 0, 0, 0, 83, 375, 1, 0, 0, 0, 85, 382, 1, 0, 0,
		0, 87, 390, 1, 0, 0, 0, 89, 396, 1, 0, 0, 0, 91, 407, 1, 0, 0, 0, 93, 413,
		1, 0, 0, 0, 95, 416, 1, 0, 0, 0, 97, 421, 1, 0, 0, 0, 99, 427, 1, 0, 0,
		0, 101, 429, 1, 0, 0, 0, 103, 431, 1, 0, 0, 0, 105, 445, 1, 0, 0, 0, 107,
		447, 1, 0, 0, 0, 109, 451, 1, 0, 0, 0, 111, 455, 1, 0, 0, 0, 113, 462,
		1, 0, 0, 0, 115, 468, 1, 0, 0, 0, 117, 472, 1, 0, 0, 0, 119, 477, 1, 0,
		0, 0, 121, 123, 7, 0, 0, 0, 122, 121, 1, 0, 0, 0, 123, 124, 1, 0, 0, 0,
		124, 122, 1, 0, 0, 0, 124, 125, 1, 0, 0, 0, 125, 132, 1, 0, 0, 0, 126,
		128, 5, 46, 0, 0, 127, 129, 7, 0, 0, 0, 128, 127, 1, 0, 0, 0, 129, 130,
		1, 0, 0, 0, 130, 128, 1, 0, 0, 0, 130, 131, 1, 0, 0, 0, 131, 133, 1, 0,
		0, 0, 132, 126, 1, 0, 0, 0, 132, 133, 1, 0, 0, 0, 133, 2, 1, 0, 0, 0, 134,
		140, 3, 1, 0, 0, 135, 137, 7, 1, 0, 0, 136, 138, 7, 2, 0, 0, 137, 136,
		1, 0, 0, 0, 137, 138, 1, 0, 0, 0, 138, 139, 1, 0, 0, 0, 139, 141, 3, 1,
		0, 0, 140, 135, 1, 0, 0, 0, 140, 141, 1, 0, 0, 0, 141, 4, 1, 0, 0, 0, 142,
		145, 3, 1, 0, 0, 143, 145, 3, 3, 1, 0, 144, 142, 1, 0, 0, 0, 144, 143,
		1, 0, 0, 0, 145, 6, 1, 0, 0, 0, 146, 152, 5, 39, 0, 0, 147, 151, 8, 3,
		0, 0, 148, 149, 5, 92, 0, 0, 149, 151, 9, 0, 0, 0, 150, 147, 1, 0, 0, 0,
		150, 148, 1, 0, 0, 0, 151, 154, 1, 0, 0, 0, 152, 150, 1, 0, 0, 0, 152,
		153, 1, 0, 0, 0, 153, 155, 1, 0, 0, 0, 154, 152, 1, 0, 0, 0, 155, 167,
		5, 39, 0, 0, 156, 162, 5, 34, 0, 0, 157, 161, 8, 4, 0, 0, 158, 159, 5,
		92, 0, 0, 159, 161, 9, 0, 0, 0, 160, 157, 1, 0, 0, 0, 160, 158, 1, 0, 0,
		0, 161, 164, 1, 0, 0, 0, 162, 160, 1, 0, 0, 0, 162, 163, 1, 0, 0, 0, 163,
		165, 1, 0, 0, 0, 164, 162, 1, 0, 0, 0, 165, 167, 5, 34, 0, 0, 166, 146,
		1, 0, 0, 0, 166, 156, 1, 0, 0, 0, 167, 8, 1, 0, 0, 0, 168, 169, 5, 43,
		0, 0, 169, 10, 1, 0, 0, 0, 170, 171, 5, 45, 0, 0, 171, 12, 1, 0, 0, 0,
		172, 173, 5, 42, 0, 0, 173, 14, 1, 0, 0, 0, 174, 175, 5, 47, 0, 0, 175,
		16, 1, 0, 0, 0, 176, 177, 5, 37, 0, 0, 177, 18, 1, 0, 0, 0, 178, 179, 5,
		94, 0, 0, 179, 20, 1, 0, 0, 0, 180, 181, 7, 5, 0, 0, 181, 182, 7, 6, 0,
		0, 182, 183, 7, 7, 0, 0, 183, 22, 1, 0, 0, 0, 184, 185, 7, 8, 0, 0, 185,
		186, 7, 9, 0, 0, 186, 24, 1, 0, 0, 0, 187, 188, 7, 10, 0, 0, 188, 189,
		7, 6, 0, 0, 189, 190, 7, 11, 0, 0, 190, 191, 7, 1, 0, 0, 191, 192, 7, 12,
		0, 0, 192, 193, 7, 12, 0, 0, 193, 26, 1, 0, 0, 0, 194, 195, 5, 61, 0, 0,
		195, 28, 1, 0, 0, 0, 196, 197, 5, 61, 0, 0, 197, 198, 5, 61, 0, 0, 198,
		30, 1, 0, 0, 0, 199, 200, 5, 33, 0, 0, 200, 201, 5, 61, 0, 0, 201, 32,
		1, 0, 0, 0, 202, 203, 5, 62, 0, 0, 203, 34, 1, 0, 0, 0, 204, 205, 5, 60,
		0, 0, 205, 36, 1, 0, 0, 0, 206, 207, 5, 62, 0, 0, 207, 208, 5, 61, 0, 0,
		208, 38, 1, 0, 0, 0, 209, 210, 5, 60, 0, 0, 210, 211, 5, 61, 0, 0, 211,
		40, 1, 0, 0, 0, 212, 213, 5, 61, 0, 0, 213, 214, 5, 126, 0, 0, 214, 42,
		1, 0, 0, 0, 215, 216, 5, 33, 0, 0, 216, 217, 5, 126, 0, 0, 217, 44, 1,
		0, 0, 0, 218, 219, 7, 13, 0, 0, 219, 220, 7, 14, 0, 0, 220, 46, 1, 0, 0,
		0, 221, 222, 7, 15, 0, 0, 222, 223, 7, 16, 0, 0, 223, 224, 7, 17, 0, 0,
		224, 225, 7, 18, 0, 0, 225, 226, 7, 8, 0, 0, 226, 227, 7, 10, 0, 0, 227,
		228, 7, 17, 0, 0, 228, 48, 1, 0, 0, 0, 229, 230, 7, 8, 0, 0, 230, 231,
		7, 6, 0, 0, 231, 50, 1, 0, 0, 0, 232, 233, 7, 16, 0, 0, 233, 234, 7, 19,
		0, 0, 234, 235, 7, 6, 0, 0, 235, 236, 7, 8, 0, 0, 236, 237, 7, 9, 0, 0,
		237, 238, 7, 16, 0, 0, 238, 239, 7, 6, 0, 0, 239, 240, 7, 19, 0, 0, 240,
		52, 1, 0, 0, 0, 241, 242, 7, 19, 0, 0, 242, 243, 7, 9, 0, 0, 243, 244,
		7, 8, 0, 0, 244, 245, 7, 10, 0, 0, 245, 246, 7, 20, 0, 0, 246, 247, 5,
		95, 0, 0, 247, 248, 7, 11, 0, 0, 248, 249, 7, 1, 0, 0, 249, 250, 7, 21,
		0, 0, 250, 251, 7, 17, 0, 0, 251, 54, 1, 0, 0, 0, 252, 253, 7, 19, 0, 0,
		253, 254, 7, 9, 0, 0, 254, 255, 7, 8, 0, 0, 255, 256, 7, 10, 0, 0, 256,
		257, 7, 20, 0, 0, 257, 258, 5, 95, 0, 0, 258, 259, 7, 9, 0, 0, 259, 260,
		7, 16, 0, 0, 260, 261, 7, 19, 0, 0, 261, 262, 7, 18, 0, 0, 262, 263, 7,
		17, 0, 0, 263, 56, 1, 0, 0, 0, 264, 265, 7, 8, 0, 0, 265, 266, 7, 21, 0,
		0, 266, 267, 7, 21, 0, 0, 267, 268, 7, 12, 0, 0, 268, 269, 7, 1, 0, 0,
		269, 270, 7, 17, 0, 0, 270, 58, 1, 0, 0, 0, 271, 272, 7, 13, 0, 0, 272,
		273, 7, 8, 0, 0, 273, 274, 7, 8, 0, 0, 274, 275, 7, 11, 0, 0, 275, 60,
		1, 0, 0, 0, 276, 277, 7, 12, 0, 0, 277, 278, 7, 10, 0, 0, 278, 342, 7,
		22, 0, 0, 279, 280, 7, 22, 0, 0, 280, 281, 7, 16, 0, 0, 281, 342, 7, 6,
		0, 0, 282, 283, 7, 22, 0, 0, 283, 284, 7, 5, 0, 0, 284, 342, 7, 23, 0,
		0, 285, 286, 7, 5, 0, 0, 286, 287, 7, 24, 0, 0, 287, 342, 7, 19, 0, 0,
		288, 289, 7, 19, 0, 0, 289, 290, 7, 9, 0, 0, 290, 291, 7, 8, 0, 0, 291,
		292, 7, 10, 0, 0, 292, 342, 7, 20, 0, 0, 293, 294, 7, 12, 0, 0, 294, 295,
		7, 17, 0, 0, 295, 296, 7, 7, 0, 0, 296, 297, 7, 7, 0, 0, 297, 298, 7, 1,
		0, 0, 298, 342, 7, 24, 0, 0, 299, 300, 7, 12, 0, 0, 300, 301, 7, 17, 0,
		0, 301, 302, 7, 7, 0, 0, 302, 303, 7, 24, 0, 0, 303, 304, 7, 5, 0, 0, 304,
		342, 7, 9, 0, 0, 305, 306, 7, 25, 0, 0, 306, 307, 7, 8, 0, 0, 307, 308,
		7, 10, 0, 0, 308, 309, 7, 6, 0, 0, 309, 342, 7, 17, 0, 0, 310, 311, 7,
		25, 0, 0, 311, 312, 7, 8, 0, 0, 312, 313, 7, 10, 0, 0, 313, 314, 7, 6,
		0, 0, 314, 315, 7, 17, 0, 0, 315, 316, 5, 95, 0, 0, 316, 317, 7, 24, 0,
		0, 317, 318, 7, 5, 0, 0, 318, 319, 7, 11, 0, 0, 319, 320, 7, 10, 0, 0,
		320, 321, 7, 1, 0, 0, 321, 342, 7, 12, 0, 0, 322, 323, 7, 13, 0, 0, 323,
		324, 7, 8, 0, 0, 324, 325, 7, 17, 0, 0, 325, 326, 7, 17, 0, 0, 326, 327,
		7, 8, 0, 0, 327, 328, 7, 22, 0, 0, 328, 342, 7, 26, 0, 0, 329, 330, 7,
		17, 0, 0, 330, 331, 7, 8, 0, 0, 331, 332, 7, 20, 0, 0, 332, 342, 7, 26,
		0, 0, 333, 334, 7, 27, 0, 0, 334, 335, 7, 10, 0, 0, 335, 336, 7, 5, 0,
		0, 336, 337, 7, 6, 0, 0, 337, 338, 7, 17, 0, 0, 338, 339, 7, 16, 0, 0,
		339, 340, 7, 11, 0, 0, 340, 342, 7, 1, 0, 0, 341, 276, 1, 0, 0, 0, 341,
		279, 1, 0, 0, 0, 341, 282, 1, 0, 0, 0, 341, 285, 1, 0, 0, 0, 341, 288,
		1, 0, 0, 0, 341, 293, 1, 0, 0, 0, 341, 299, 1, 0, 0, 0, 341, 305, 1, 0,
		0, 0, 341, 310, 1, 0, 0, 0, 341, 322, 1, 0, 0, 0, 341, 329, 1, 0, 0, 0,
		341, 333, 1, 0, 0, 0, 342, 62, 1, 0, 0, 0, 343, 344, 3, 85, 42, 0, 344,
		64, 1, 0, 0, 0, 345, 346, 5, 123, 0, 0, 346, 66, 1, 0, 0, 0, 347, 348,
		5, 125, 0, 0, 348, 68, 1, 0, 0, 0, 349, 350, 5, 40, 0, 0, 350, 70, 1, 0,
		0, 0, 351, 352, 5, 41, 0, 0, 352, 72, 1, 0, 0, 0, 353, 354, 5, 91, 0, 0,
		354, 74, 1, 0, 0, 0, 355, 356, 5, 93, 0, 0, 356, 76, 1, 0, 0, 0, 357, 358,
		5, 44, 0, 0, 358, 78, 1, 0, 0, 0, 359, 360, 5, 64, 0, 0, 360, 80, 1, 0,
		0, 0, 361, 363, 7, 0, 0, 0, 362, 361, 1, 0, 0, 0, 363, 364, 1, 0, 0, 0,
		364, 362, 1, 0, 0, 0, 364, 365, 1, 0, 0, 0, 365, 369, 1, 0, 0, 0, 366,
		367, 7, 22, 0, 0, 367, 370, 7, 12, 0, 0, 368, 370, 7, 28, 0, 0, 369, 366,
		1, 0, 0, 0, 369, 368, 1, 0, 0, 0, 370, 372, 1, 0, 0, 0, 371, 362, 1, 0,
		0, 0, 372, 373, 1, 0, 0, 0, 373, 371, 1, 0, 0, 0, 373, 374, 1, 0, 0, 0,
		374, 82, 1, 0, 0, 0, 375, 379, 7, 29, 0, 0, 376, 378, 7, 30, 0, 0, 377,
		376, 1, 0, 0, 0, 378, 381, 1, 0, 0, 0, 379, 377, 1, 0, 0, 0, 379, 380,
		1, 0, 0, 0, 380, 84, 1, 0, 0, 0, 381, 379, 1, 0, 0, 0, 382, 386, 7, 31,
		0, 0, 383, 385, 7, 32, 0, 0, 384, 383, 1, 0, 0, 0, 385, 388, 1, 0, 0, 0,
		386, 384, 1, 0, 0, 0, 386, 387, 1, 0, 0, 0, 387, 86, 1, 0, 0, 0, 388, 386,
		1, 0, 0, 0, 389, 391, 7, 33, 0, 0, 390, 389, 1, 0, 0, 0, 391, 392, 1, 0,
		0, 0, 392, 390, 1, 0, 0, 0, 392, 393, 1, 0, 0, 0, 393, 394, 1, 0, 0, 0,
		394, 395, 6, 43, 0, 0, 395, 88, 1, 0, 0, 0, 396, 400, 5, 35, 0, 0, 397,
		399, 9, 0, 0, 0, 398, 397, 1, 0, 0, 0, 399, 402, 1, 0, 0, 0, 400, 401,
		1, 0, 0, 0, 400, 398, 1, 0, 0, 0, 401, 403, 1, 0, 0, 0, 402, 400, 1, 0,
		0, 0, 403, 404, 5, 10, 0, 0, 404, 405, 1, 0, 0, 0, 405, 406, 6, 44, 1,
		0, 406, 90, 1, 0, 0, 0, 407, 409, 7, 34, 0, 0, 408, 410, 7, 32, 0, 0, 409,
		408, 1, 0, 0, 0, 410, 411, 1, 0, 0, 0, 411, 409, 1, 0, 0, 0, 411, 412,
		1, 0, 0, 0, 412, 92, 1, 0, 0, 0, 413, 414, 7, 16, 0, 0, 414, 415, 7, 21,
		0, 0, 415, 94, 1, 0, 0, 0, 416, 417, 7, 17, 0, 0, 417, 418, 7, 9, 0, 0,
		418, 419, 7, 10, 0, 0, 419, 420, 7, 1, 0, 0, 420, 96, 1, 0, 0, 0, 421,
		422, 7, 21, 0, 0, 422, 423, 7, 5, 0, 0, 423, 424, 7, 11, 0, 0, 424, 425,
		7, 12, 0, 0, 425, 426, 7, 1, 0, 0, 426, 98, 1, 0, 0, 0, 427, 428, 7, 17,
		0, 0, 428, 100, 1, 0, 0, 0, 429, 430, 5, 58, 0, 0, 430, 102, 1, 0, 0, 0,
		431, 432, 5, 46, 0, 0, 432, 104, 1, 0, 0, 0, 433, 446, 7, 0, 0, 0, 434,
		436, 7, 35, 0, 0, 435, 434, 1, 0, 0, 0, 436, 437, 1, 0, 0, 0, 437, 435,
		1, 0, 0, 0, 437, 438, 1, 0, 0, 0, 438, 442, 1, 0, 0, 0, 439, 441, 7, 0,
		0, 0, 440, 439, 1, 0, 0, 0, 441, 444, 1, 0, 0, 0, 442, 440, 1, 0, 0, 0,
		442, 443, 1, 0, 0, 0, 443, 446, 1, 0, 0, 0, 444, 442, 1, 0, 0, 0, 445,
		433, 1, 0, 0, 0, 445, 435, 1, 0, 0, 0, 446, 106, 1, 0, 0, 0, 447, 448,
		7, 0, 0, 0, 448, 449, 7, 0, 0, 0, 449, 108, 1, 0, 0, 0, 450, 452, 7, 0,
		0, 0, 451, 450, 1, 0, 0, 0, 452, 453, 1, 0, 0, 0, 453, 451, 1, 0, 0, 0,
		453, 454, 1, 0, 0, 0, 454, 110, 1, 0, 0, 0, 455, 456, 7, 22, 0, 0, 456,
		457, 7, 1, 0, 0, 457, 458, 7, 17, 0, 0, 458, 459, 7, 9, 0, 0, 459, 460,
		7, 16, 0, 0, 460, 461, 7, 25, 0, 0, 461, 112, 1, 0, 0, 0, 462, 463, 7,
		11, 0, 0, 463, 464, 7, 5, 0, 0, 464, 465, 7, 13, 0, 0, 465, 466, 7, 1,
		0, 0, 466, 467, 7, 11, 0, 0, 467, 114, 1, 0, 0, 0, 468, 469, 7, 7, 0, 0,
		469, 470, 7, 1, 0, 0, 470, 471, 7, 21, 0, 0, 471, 116, 1, 0, 0, 0, 472,
		473, 5, 36, 0, 0, 473, 118, 1, 0, 0, 0, 474, 478, 5, 10, 0, 0, 475, 476,
		5, 13, 0, 0, 476, 478, 5, 10, 0, 0, 477, 474, 1, 0, 0, 0, 477, 475, 1,
		0, 0, 0, 478, 120, 1, 0, 0, 0, 26, 0, 124, 130, 132, 137, 140, 144, 150,
		152, 160, 162, 166, 341, 364, 369, 373, 379, 386, 392, 400, 411, 437, 442,
		445, 453, 477, 2, 0, 2, 0, 0, 3, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// PromQLExtensionLexerInit initializes any static state used to implement PromQLExtensionLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewPromQLExtensionLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func PromQLExtensionLexerInit() {
	staticData := &PromQLExtensionLexerLexerStaticData
	staticData.once.Do(promqlextensionlexerLexerInit)
}

// NewPromQLExtensionLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewPromQLExtensionLexer(input antlr.CharStream) *PromQLExtensionLexer {
	PromQLExtensionLexerInit()
	l := new(PromQLExtensionLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &PromQLExtensionLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "PromQLExtensionLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// PromQLExtensionLexer tokens.
const (
	PromQLExtensionLexerNUMBER               = 1
	PromQLExtensionLexerSTRING               = 2
	PromQLExtensionLexerADD                  = 3
	PromQLExtensionLexerSUB                  = 4
	PromQLExtensionLexerMULT                 = 5
	PromQLExtensionLexerDIV                  = 6
	PromQLExtensionLexerMOD                  = 7
	PromQLExtensionLexerPOW                  = 8
	PromQLExtensionLexerAND                  = 9
	PromQLExtensionLexerOR                   = 10
	PromQLExtensionLexerUNLESS               = 11
	PromQLExtensionLexerEQ                   = 12
	PromQLExtensionLexerDEQ                  = 13
	PromQLExtensionLexerNE                   = 14
	PromQLExtensionLexerGT                   = 15
	PromQLExtensionLexerLT                   = 16
	PromQLExtensionLexerGE                   = 17
	PromQLExtensionLexerLE                   = 18
	PromQLExtensionLexerRE                   = 19
	PromQLExtensionLexerNRE                  = 20
	PromQLExtensionLexerBY                   = 21
	PromQLExtensionLexerWITHOUT              = 22
	PromQLExtensionLexerON                   = 23
	PromQLExtensionLexerIGNORING             = 24
	PromQLExtensionLexerGROUP_LEFT           = 25
	PromQLExtensionLexerGROUP_RIGHT          = 26
	PromQLExtensionLexerOFFSET               = 27
	PromQLExtensionLexerBOOL                 = 28
	PromQLExtensionLexerAGGREGATION_OPERATOR = 29
	PromQLExtensionLexerFUNCTION             = 30
	PromQLExtensionLexerLEFT_BRACE           = 31
	PromQLExtensionLexerRIGHT_BRACE          = 32
	PromQLExtensionLexerLEFT_PAREN           = 33
	PromQLExtensionLexerRIGHT_PAREN          = 34
	PromQLExtensionLexerLEFT_BRACKET         = 35
	PromQLExtensionLexerRIGHT_BRACKET        = 36
	PromQLExtensionLexerCOMMA                = 37
	PromQLExtensionLexerAT                   = 38
	PromQLExtensionLexerDURATION             = 39
	PromQLExtensionLexerMETRIC_NAME          = 40
	PromQLExtensionLexerLABEL_NAME           = 41
	PromQLExtensionLexerWS                   = 42
	PromQLExtensionLexerSL_COMMENT           = 43
	PromQLExtensionLexerEX_ID                = 44
	PromQLExtensionLexerEX_IF                = 45
	PromQLExtensionLexerEX_TRUE              = 46
	PromQLExtensionLexerEX_FALSE             = 47
	PromQLExtensionLexerEX_T                 = 48
	PromQLExtensionLexerEX_COLON             = 49
	PromQLExtensionLexerEX_DOT               = 50
	PromQLExtensionLexerEX_POSITIVE_INTEGER  = 51
	PromQLExtensionLexerEX_TWO_DIGITS        = 52
	PromQLExtensionLexerEX_DIGITS            = 53
	PromQLExtensionLexerEX_METRIC_KEYWORD    = 54
	PromQLExtensionLexerEX_LABEL_KEYWORD     = 55
	PromQLExtensionLexerEX_DEF               = 56
	PromQLExtensionLexerEX_CALL_SIGN         = 57
	PromQLExtensionLexerEX_NL                = 58
)

// PromQLExtensionLexer escapedChannels.
const (
	PromQLExtensionLexerWHITESPACE = 2
	PromQLExtensionLexerCOMMENTS   = 3
)
