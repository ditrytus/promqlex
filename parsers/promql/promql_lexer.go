// Code generated from PromQLLexer.g4 by ANTLR 4.13.2. DO NOT EDIT.

package promql

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type PromQLLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var PromQLLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func promqllexerLexerInit() {
	staticData := &PromQLLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "WHITESPACE", "COMMENTS",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE", "RAW_STRING_MODE",
	}
	staticData.LiteralNames = []string{
		"", "", "", "", "", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'and'",
		"'or'", "'unless'", "'='", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='",
		"'=~'", "'!~'", "'by'", "'without'", "'on'", "'ignoring'", "'group_left'",
		"'group_right'", "'offset'", "'bool'", "'{'", "'}'", "'('", "')'", "'['",
		"']'", "','", "'@'",
	}
	staticData.SymbolicNames = []string{
		"", "AGGREGATION_OPERATOR", "FUNCTION", "NUMBER", "STRING", "ADD", "SUB",
		"MULT", "DIV", "MOD", "POW", "AND", "OR", "UNLESS", "EQ", "DEQ", "NE",
		"GT", "LT", "GE", "LE", "RE", "NRE", "BY", "WITHOUT", "ON", "IGNORING",
		"GROUP_LEFT", "GROUP_RIGHT", "OFFSET", "BOOL", "LEFT_BRACE", "RIGHT_BRACE",
		"LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA",
		"AT", "SUBQUERY_RANGE", "TIME_RANGE", "DURATION", "METRIC_NAME", "LABEL_NAME",
		"WS", "SL_COMMENT", "RAW_STRING", "BACKTICK_OPEN",
	}
	staticData.RuleNames = []string{
		"NUMERAL", "SCIENTIFIC_NUMBER", "NUMBER", "STRING", "BACKTICK_OPEN",
		"ADD", "SUB", "MULT", "DIV", "MOD", "POW", "AND", "OR", "UNLESS", "EQ",
		"DEQ", "NE", "GT", "LT", "GE", "LE", "RE", "NRE", "BY", "WITHOUT", "ON",
		"IGNORING", "GROUP_LEFT", "GROUP_RIGHT", "OFFSET", "BOOL", "LEFT_BRACE",
		"RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET",
		"COMMA", "AT", "SUBQUERY_RANGE", "TIME_RANGE", "DURATION", "METRIC_NAME",
		"LABEL_NAME", "WS", "SL_COMMENT", "RAW_STRING_CONTENT", "RAW_STRING",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 47, 347, 6, -1, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3,
		7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9,
		7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7,
		14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19,
		2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2,
		25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30,
		7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7,
		35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40,
		2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2,
		46, 7, 46, 2, 47, 7, 47, 1, 0, 4, 0, 100, 8, 0, 11, 0, 12, 0, 101, 1, 0,
		1, 0, 4, 0, 106, 8, 0, 11, 0, 12, 0, 107, 3, 0, 110, 8, 0, 1, 1, 1, 1,
		1, 1, 3, 1, 115, 8, 1, 1, 1, 3, 1, 118, 8, 1, 1, 2, 1, 2, 3, 2, 122, 8,
		2, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 128, 8, 3, 10, 3, 12, 3, 131, 9, 3, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 138, 8, 3, 10, 3, 12, 3, 141, 9, 3, 1,
		3, 3, 3, 144, 8, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1,
		6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11,
		1, 11, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17,
		1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1,
		21, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24,
		1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1,
		26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1,
		28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29,
		1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1,
		31, 1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36,
		1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 279, 8,
		39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 41, 4, 41, 288, 8, 41,
		11, 41, 12, 41, 289, 1, 41, 1, 41, 1, 41, 3, 41, 295, 8, 41, 4, 41, 297,
		8, 41, 11, 41, 12, 41, 298, 1, 42, 1, 42, 5, 42, 303, 8, 42, 10, 42, 12,
		42, 306, 9, 42, 1, 42, 1, 42, 1, 43, 1, 43, 5, 43, 312, 8, 43, 10, 43,
		12, 43, 315, 9, 43, 1, 44, 4, 44, 318, 8, 44, 11, 44, 12, 44, 319, 1, 44,
		1, 44, 1, 45, 1, 45, 5, 45, 326, 8, 45, 10, 45, 12, 45, 329, 9, 45, 1,
		45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 4, 46, 338, 8, 46, 11, 46,
		12, 46, 339, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 327, 0, 48, 2,
		0, 4, 0, 6, 3, 8, 4, 10, 47, 12, 5, 14, 6, 16, 7, 18, 8, 20, 9, 22, 10,
		24, 11, 26, 12, 28, 13, 30, 14, 32, 15, 34, 16, 36, 17, 38, 18, 40, 19,
		42, 20, 44, 21, 46, 22, 48, 23, 50, 24, 52, 25, 54, 26, 56, 27, 58, 28,
		60, 29, 62, 30, 64, 31, 66, 32, 68, 33, 70, 34, 72, 35, 74, 36, 76, 37,
		78, 38, 80, 39, 82, 40, 84, 41, 86, 42, 88, 43, 90, 44, 92, 45, 94, 0,
		96, 46, 2, 0, 1, 30, 1, 0, 48, 57, 2, 0, 69, 69, 101, 101, 2, 0, 43, 43,
		45, 45, 2, 0, 39, 39, 92, 92, 2, 0, 34, 34, 92, 92, 2, 0, 65, 65, 97, 97,
		2, 0, 78, 78, 110, 110, 2, 0, 68, 68, 100, 100, 2, 0, 79, 79, 111, 111,
		2, 0, 82, 82, 114, 114, 2, 0, 85, 85, 117, 117, 2, 0, 76, 76, 108, 108,
		2, 0, 83, 83, 115, 115, 2, 0, 66, 66, 98, 98, 2, 0, 89, 89, 121, 121, 2,
		0, 87, 87, 119, 119, 2, 0, 73, 73, 105, 105, 2, 0, 84, 84, 116, 116, 2,
		0, 72, 72, 104, 104, 2, 0, 71, 71, 103, 103, 2, 0, 80, 80, 112, 112, 2,
		0, 70, 70, 102, 102, 2, 0, 77, 77, 109, 109, 12, 0, 68, 68, 72, 72, 77,
		77, 83, 83, 87, 87, 89, 89, 100, 100, 104, 104, 109, 109, 115, 115, 119,
		119, 121, 121, 4, 0, 58, 58, 65, 90, 95, 95, 97, 122, 4, 0, 48, 58, 65,
		90, 95, 95, 97, 122, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90,
		95, 95, 97, 122, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 92, 92, 96, 96, 364,
		0, 6, 1, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 10, 1, 0, 0, 0, 0, 12, 1, 0, 0,
		0, 0, 14, 1, 0, 0, 0, 0, 16, 1, 0, 0, 0, 0, 18, 1, 0, 0, 0, 0, 20, 1, 0,
		0, 0, 0, 22, 1, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 26, 1, 0, 0, 0, 0, 28, 1,
		0, 0, 0, 0, 30, 1, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 34, 1, 0, 0, 0, 0, 36,
		1, 0, 0, 0, 0, 38, 1, 0, 0, 0, 0, 40, 1, 0, 0, 0, 0, 42, 1, 0, 0, 0, 0,
		44, 1, 0, 0, 0, 0, 46, 1, 0, 0, 0, 0, 48, 1, 0, 0, 0, 0, 50, 1, 0, 0, 0,
		0, 52, 1, 0, 0, 0, 0, 54, 1, 0, 0, 0, 0, 56, 1, 0, 0, 0, 0, 58, 1, 0, 0,
		0, 0, 60, 1, 0, 0, 0, 0, 62, 1, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 66, 1, 0,
		0, 0, 0, 68, 1, 0, 0, 0, 0, 70, 1, 0, 0, 0, 0, 72, 1, 0, 0, 0, 0, 74, 1,
		0, 0, 0, 0, 76, 1, 0, 0, 0, 0, 78, 1, 0, 0, 0, 0, 80, 1, 0, 0, 0, 0, 82,
		1, 0, 0, 0, 0, 84, 1, 0, 0, 0, 0, 86, 1, 0, 0, 0, 0, 88, 1, 0, 0, 0, 0,
		90, 1, 0, 0, 0, 0, 92, 1, 0, 0, 0, 1, 94, 1, 0, 0, 0, 1, 96, 1, 0, 0, 0,
		2, 99, 1, 0, 0, 0, 4, 111, 1, 0, 0, 0, 6, 121, 1, 0, 0, 0, 8, 143, 1, 0,
		0, 0, 10, 145, 1, 0, 0, 0, 12, 150, 1, 0, 0, 0, 14, 152, 1, 0, 0, 0, 16,
		154, 1, 0, 0, 0, 18, 156, 1, 0, 0, 0, 20, 158, 1, 0, 0, 0, 22, 160, 1,
		0, 0, 0, 24, 162, 1, 0, 0, 0, 26, 166, 1, 0, 0, 0, 28, 169, 1, 0, 0, 0,
		30, 176, 1, 0, 0, 0, 32, 178, 1, 0, 0, 0, 34, 181, 1, 0, 0, 0, 36, 184,
		1, 0, 0, 0, 38, 186, 1, 0, 0, 0, 40, 188, 1, 0, 0, 0, 42, 191, 1, 0, 0,
		0, 44, 194, 1, 0, 0, 0, 46, 197, 1, 0, 0, 0, 48, 200, 1, 0, 0, 0, 50, 203,
		1, 0, 0, 0, 52, 211, 1, 0, 0, 0, 54, 214, 1, 0, 0, 0, 56, 223, 1, 0, 0,
		0, 58, 234, 1, 0, 0, 0, 60, 246, 1, 0, 0, 0, 62, 253, 1, 0, 0, 0, 64, 258,
		1, 0, 0, 0, 66, 260, 1, 0, 0, 0, 68, 262, 1, 0, 0, 0, 70, 264, 1, 0, 0,
		0, 72, 266, 1, 0, 0, 0, 74, 268, 1, 0, 0, 0, 76, 270, 1, 0, 0, 0, 78, 272,
		1, 0, 0, 0, 80, 274, 1, 0, 0, 0, 82, 282, 1, 0, 0, 0, 84, 296, 1, 0, 0,
		0, 86, 300, 1, 0, 0, 0, 88, 309, 1, 0, 0, 0, 90, 317, 1, 0, 0, 0, 92, 323,
		1, 0, 0, 0, 94, 337, 1, 0, 0, 0, 96, 343, 1, 0, 0, 0, 98, 100, 7, 0, 0,
		0, 99, 98, 1, 0, 0, 0, 100, 101, 1, 0, 0, 0, 101, 99, 1, 0, 0, 0, 101,
		102, 1, 0, 0, 0, 102, 109, 1, 0, 0, 0, 103, 105, 5, 46, 0, 0, 104, 106,
		7, 0, 0, 0, 105, 104, 1, 0, 0, 0, 106, 107, 1, 0, 0, 0, 107, 105, 1, 0,
		0, 0, 107, 108, 1, 0, 0, 0, 108, 110, 1, 0, 0, 0, 109, 103, 1, 0, 0, 0,
		109, 110, 1, 0, 0, 0, 110, 3, 1, 0, 0, 0, 111, 117, 3, 2, 0, 0, 112, 114,
		7, 1, 0, 0, 113, 115, 7, 2, 0, 0, 114, 113, 1, 0, 0, 0, 114, 115, 1, 0,
		0, 0, 115, 116, 1, 0, 0, 0, 116, 118, 3, 2, 0, 0, 117, 112, 1, 0, 0, 0,
		117, 118, 1, 0, 0, 0, 118, 5, 1, 0, 0, 0, 119, 122, 3, 2, 0, 0, 120, 122,
		3, 4, 1, 0, 121, 119, 1, 0, 0, 0, 121, 120, 1, 0, 0, 0, 122, 7, 1, 0, 0,
		0, 123, 129, 5, 39, 0, 0, 124, 128, 8, 3, 0, 0, 125, 126, 5, 92, 0, 0,
		126, 128, 9, 0, 0, 0, 127, 124, 1, 0, 0, 0, 127, 125, 1, 0, 0, 0, 128,
		131, 1, 0, 0, 0, 129, 127, 1, 0, 0, 0, 129, 130, 1, 0, 0, 0, 130, 132,
		1, 0, 0, 0, 131, 129, 1, 0, 0, 0, 132, 144, 5, 39, 0, 0, 133, 139, 5, 34,
		0, 0, 134, 138, 8, 4, 0, 0, 135, 136, 5, 92, 0, 0, 136, 138, 9, 0, 0, 0,
		137, 134, 1, 0, 0, 0, 137, 135, 1, 0, 0, 0, 138, 141, 1, 0, 0, 0, 139,
		137, 1, 0, 0, 0, 139, 140, 1, 0, 0, 0, 140, 142, 1, 0, 0, 0, 141, 139,
		1, 0, 0, 0, 142, 144, 5, 34, 0, 0, 143, 123, 1, 0, 0, 0, 143, 133, 1, 0,
		0, 0, 144, 9, 1, 0, 0, 0, 145, 146, 5, 96, 0, 0, 146, 147, 1, 0, 0, 0,
		147, 148, 6, 4, 0, 0, 148, 149, 6, 4, 1, 0, 149, 11, 1, 0, 0, 0, 150, 151,
		5, 43, 0, 0, 151, 13, 1, 0, 0, 0, 152, 153, 5, 45, 0, 0, 153, 15, 1, 0,
		0, 0, 154, 155, 5, 42, 0, 0, 155, 17, 1, 0, 0, 0, 156, 157, 5, 47, 0, 0,
		157, 19, 1, 0, 0, 0, 158, 159, 5, 37, 0, 0, 159, 21, 1, 0, 0, 0, 160, 161,
		5, 94, 0, 0, 161, 23, 1, 0, 0, 0, 162, 163, 7, 5, 0, 0, 163, 164, 7, 6,
		0, 0, 164, 165, 7, 7, 0, 0, 165, 25, 1, 0, 0, 0, 166, 167, 7, 8, 0, 0,
		167, 168, 7, 9, 0, 0, 168, 27, 1, 0, 0, 0, 169, 170, 7, 10, 0, 0, 170,
		171, 7, 6, 0, 0, 171, 172, 7, 11, 0, 0, 172, 173, 7, 1, 0, 0, 173, 174,
		7, 12, 0, 0, 174, 175, 7, 12, 0, 0, 175, 29, 1, 0, 0, 0, 176, 177, 5, 61,
		0, 0, 177, 31, 1, 0, 0, 0, 178, 179, 5, 61, 0, 0, 179, 180, 5, 61, 0, 0,
		180, 33, 1, 0, 0, 0, 181, 182, 5, 33, 0, 0, 182, 183, 5, 61, 0, 0, 183,
		35, 1, 0, 0, 0, 184, 185, 5, 62, 0, 0, 185, 37, 1, 0, 0, 0, 186, 187, 5,
		60, 0, 0, 187, 39, 1, 0, 0, 0, 188, 189, 5, 62, 0, 0, 189, 190, 5, 61,
		0, 0, 190, 41, 1, 0, 0, 0, 191, 192, 5, 60, 0, 0, 192, 193, 5, 61, 0, 0,
		193, 43, 1, 0, 0, 0, 194, 195, 5, 61, 0, 0, 195, 196, 5, 126, 0, 0, 196,
		45, 1, 0, 0, 0, 197, 198, 5, 33, 0, 0, 198, 199, 5, 126, 0, 0, 199, 47,
		1, 0, 0, 0, 200, 201, 7, 13, 0, 0, 201, 202, 7, 14, 0, 0, 202, 49, 1, 0,
		0, 0, 203, 204, 7, 15, 0, 0, 204, 205, 7, 16, 0, 0, 205, 206, 7, 17, 0,
		0, 206, 207, 7, 18, 0, 0, 207, 208, 7, 8, 0, 0, 208, 209, 7, 10, 0, 0,
		209, 210, 7, 17, 0, 0, 210, 51, 1, 0, 0, 0, 211, 212, 7, 8, 0, 0, 212,
		213, 7, 6, 0, 0, 213, 53, 1, 0, 0, 0, 214, 215, 7, 16, 0, 0, 215, 216,
		7, 19, 0, 0, 216, 217, 7, 6, 0, 0, 217, 218, 7, 8, 0, 0, 218, 219, 7, 9,
		0, 0, 219, 220, 7, 16, 0, 0, 220, 221, 7, 6, 0, 0, 221, 222, 7, 19, 0,
		0, 222, 55, 1, 0, 0, 0, 223, 224, 7, 19, 0, 0, 224, 225, 7, 9, 0, 0, 225,
		226, 7, 8, 0, 0, 226, 227, 7, 10, 0, 0, 227, 228, 7, 20, 0, 0, 228, 229,
		5, 95, 0, 0, 229, 230, 7, 11, 0, 0, 230, 231, 7, 1, 0, 0, 231, 232, 7,
		21, 0, 0, 232, 233, 7, 17, 0, 0, 233, 57, 1, 0, 0, 0, 234, 235, 7, 19,
		0, 0, 235, 236, 7, 9, 0, 0, 236, 237, 7, 8, 0, 0, 237, 238, 7, 10, 0, 0,
		238, 239, 7, 20, 0, 0, 239, 240, 5, 95, 0, 0, 240, 241, 7, 9, 0, 0, 241,
		242, 7, 16, 0, 0, 242, 243, 7, 19, 0, 0, 243, 244, 7, 18, 0, 0, 244, 245,
		7, 17, 0, 0, 245, 59, 1, 0, 0, 0, 246, 247, 7, 8, 0, 0, 247, 248, 7, 21,
		0, 0, 248, 249, 7, 21, 0, 0, 249, 250, 7, 12, 0, 0, 250, 251, 7, 1, 0,
		0, 251, 252, 7, 17, 0, 0, 252, 61, 1, 0, 0, 0, 253, 254, 7, 13, 0, 0, 254,
		255, 7, 8, 0, 0, 255, 256, 7, 8, 0, 0, 256, 257, 7, 11, 0, 0, 257, 63,
		1, 0, 0, 0, 258, 259, 5, 123, 0, 0, 259, 65, 1, 0, 0, 0, 260, 261, 5, 125,
		0, 0, 261, 67, 1, 0, 0, 0, 262, 263, 5, 40, 0, 0, 263, 69, 1, 0, 0, 0,
		264, 265, 5, 41, 0, 0, 265, 71, 1, 0, 0, 0, 266, 267, 5, 91, 0, 0, 267,
		73, 1, 0, 0, 0, 268, 269, 5, 93, 0, 0, 269, 75, 1, 0, 0, 0, 270, 271, 5,
		44, 0, 0, 271, 77, 1, 0, 0, 0, 272, 273, 5, 64, 0, 0, 273, 79, 1, 0, 0,
		0, 274, 275, 3, 72, 35, 0, 275, 276, 3, 84, 41, 0, 276, 278, 5, 58, 0,
		0, 277, 279, 3, 84, 41, 0, 278, 277, 1, 0, 0, 0, 278, 279, 1, 0, 0, 0,
		279, 280, 1, 0, 0, 0, 280, 281, 3, 74, 36, 0, 281, 81, 1, 0, 0, 0, 282,
		283, 3, 72, 35, 0, 283, 284, 3, 84, 41, 0, 284, 285, 3, 74, 36, 0, 285,
		83, 1, 0, 0, 0, 286, 288, 7, 0, 0, 0, 287, 286, 1, 0, 0, 0, 288, 289, 1,
		0, 0, 0, 289, 287, 1, 0, 0, 0, 289, 290, 1, 0, 0, 0, 290, 294, 1, 0, 0,
		0, 291, 292, 7, 22, 0, 0, 292, 295, 7, 12, 0, 0, 293, 295, 7, 23, 0, 0,
		294, 291, 1, 0, 0, 0, 294, 293, 1, 0, 0, 0, 295, 297, 1, 0, 0, 0, 296,
		287, 1, 0, 0, 0, 297, 298, 1, 0, 0, 0, 298, 296, 1, 0, 0, 0, 298, 299,
		1, 0, 0, 0, 299, 85, 1, 0, 0, 0, 300, 304, 7, 24, 0, 0, 301, 303, 7, 25,
		0, 0, 302, 301, 1, 0, 0, 0, 303, 306, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0,
		304, 305, 1, 0, 0, 0, 305, 307, 1, 0, 0, 0, 306, 304, 1, 0, 0, 0, 307,
		308, 6, 42, 2, 0, 308, 87, 1, 0, 0, 0, 309, 313, 7, 26, 0, 0, 310, 312,
		7, 27, 0, 0, 311, 310, 1, 0, 0, 0, 312, 315, 1, 0, 0, 0, 313, 311, 1, 0,
		0, 0, 313, 314, 1, 0, 0, 0, 314, 89, 1, 0, 0, 0, 315, 313, 1, 0, 0, 0,
		316, 318, 7, 28, 0, 0, 317, 316, 1, 0, 0, 0, 318, 319, 1, 0, 0, 0, 319,
		317, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0, 320, 321, 1, 0, 0, 0, 321, 322,
		6, 44, 3, 0, 322, 91, 1, 0, 0, 0, 323, 327, 5, 35, 0, 0, 324, 326, 9, 0,
		0, 0, 325, 324, 1, 0, 0, 0, 326, 329, 1, 0, 0, 0, 327, 328, 1, 0, 0, 0,
		327, 325, 1, 0, 0, 0, 328, 330, 1, 0, 0, 0, 329, 327, 1, 0, 0, 0, 330,
		331, 5, 10, 0, 0, 331, 332, 1, 0, 0, 0, 332, 333, 6, 45, 4, 0, 333, 93,
		1, 0, 0, 0, 334, 338, 8, 29, 0, 0, 335, 336, 5, 92, 0, 0, 336, 338, 5,
		96, 0, 0, 337, 334, 1, 0, 0, 0, 337, 335, 1, 0, 0, 0, 338, 339, 1, 0, 0,
		0, 339, 337, 1, 0, 0, 0, 339, 340, 1, 0, 0, 0, 340, 341, 1, 0, 0, 0, 341,
		342, 6, 46, 0, 0, 342, 95, 1, 0, 0, 0, 343, 344, 5, 96, 0, 0, 344, 345,
		1, 0, 0, 0, 345, 346, 6, 47, 5, 0, 346, 97, 1, 0, 0, 0, 23, 0, 1, 101,
		107, 109, 114, 117, 121, 127, 129, 137, 139, 143, 278, 289, 294, 298, 304,
		313, 319, 327, 337, 339, 6, 3, 0, 0, 5, 1, 0, 1, 42, 0, 0, 2, 0, 0, 3,
		0, 4, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// PromQLLexerInit initializes any static state used to implement PromQLLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewPromQLLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func PromQLLexerInit() {
	staticData := &PromQLLexerLexerStaticData
	staticData.once.Do(promqllexerLexerInit)
}

// NewPromQLLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewPromQLLexer(input antlr.CharStream) *PromQLLexer {
	PromQLLexerInit()
	l := new(PromQLLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &PromQLLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "PromQLLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// PromQLLexer tokens.
const (
	PromQLLexerAGGREGATION_OPERATOR = 1
	PromQLLexerFUNCTION             = 2
	PromQLLexerNUMBER               = 3
	PromQLLexerSTRING               = 4
	PromQLLexerADD                  = 5
	PromQLLexerSUB                  = 6
	PromQLLexerMULT                 = 7
	PromQLLexerDIV                  = 8
	PromQLLexerMOD                  = 9
	PromQLLexerPOW                  = 10
	PromQLLexerAND                  = 11
	PromQLLexerOR                   = 12
	PromQLLexerUNLESS               = 13
	PromQLLexerEQ                   = 14
	PromQLLexerDEQ                  = 15
	PromQLLexerNE                   = 16
	PromQLLexerGT                   = 17
	PromQLLexerLT                   = 18
	PromQLLexerGE                   = 19
	PromQLLexerLE                   = 20
	PromQLLexerRE                   = 21
	PromQLLexerNRE                  = 22
	PromQLLexerBY                   = 23
	PromQLLexerWITHOUT              = 24
	PromQLLexerON                   = 25
	PromQLLexerIGNORING             = 26
	PromQLLexerGROUP_LEFT           = 27
	PromQLLexerGROUP_RIGHT          = 28
	PromQLLexerOFFSET               = 29
	PromQLLexerBOOL                 = 30
	PromQLLexerLEFT_BRACE           = 31
	PromQLLexerRIGHT_BRACE          = 32
	PromQLLexerLEFT_PAREN           = 33
	PromQLLexerRIGHT_PAREN          = 34
	PromQLLexerLEFT_BRACKET         = 35
	PromQLLexerRIGHT_BRACKET        = 36
	PromQLLexerCOMMA                = 37
	PromQLLexerAT                   = 38
	PromQLLexerSUBQUERY_RANGE       = 39
	PromQLLexerTIME_RANGE           = 40
	PromQLLexerDURATION             = 41
	PromQLLexerMETRIC_NAME          = 42
	PromQLLexerLABEL_NAME           = 43
	PromQLLexerWS                   = 44
	PromQLLexerSL_COMMENT           = 45
	PromQLLexerRAW_STRING           = 46
	PromQLLexerBACKTICK_OPEN        = 47
)

// PromQLLexer escapedChannels.
const (
	PromQLLexerWHITESPACE = 2
	PromQLLexerCOMMENTS   = 3
)

// PromQLLexerRAW_STRING_MODE is the PromQLLexer mode.
const PromQLLexerRAW_STRING_MODE = 1

type FunctionsProvider interface {
	GetTokenType(text string) (int, bool)
}

func (l *PromQLLexer) Action(localctx antlr.RuleContext, ruleIndex, actionIndex int) {
	switch ruleIndex {
	case 42:
		l.METRIC_NAME_Action(localctx, actionIndex)

	default:
		panic("No registered action for: " + fmt.Sprint(ruleIndex))
	}
}

func (l *PromQLLexer) METRIC_NAME_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 0:

		if prov, ok := l.GetInputStream().(FunctionsProvider); ok {
			if tokenType, ok := prov.GetTokenType(l.GetText()); ok {
				l.SetType(tokenType)
			}
		}

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
